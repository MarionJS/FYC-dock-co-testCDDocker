// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Library.Tests.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BookFeature : object, Xunit.IClassFixture<BookFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public BookFeature(BookFeature.FixtureData fixtureData, Library_Tests_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Book", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create book with valid data")]
        [Xunit.TraitAttribute("FeatureTitle", "Book")]
        [Xunit.TraitAttribute("Description", "Create book with valid data")]
        [Xunit.TraitAttribute("Category", "create-book-with-valid-data")]
        public virtual void CreateBookWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "create-book-with-valid-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create book with valid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
            this.ScenarioInitialize(scenarioInfo);
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the label \"Foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.And("the release date \"01/01/1957\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the support \"physical\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the imageUrl \"localhost://images/foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the editor \"Gnome Press\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the author \"Isaac Asimov\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the volume 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.When("validate CreateBookCommand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("validation is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create book with empty author")]
        [Xunit.TraitAttribute("FeatureTitle", "Book")]
        [Xunit.TraitAttribute("Description", "Create book with empty author")]
        [Xunit.TraitAttribute("Category", "create-book-with-empty-author")]
        public virtual void CreateBookWithEmptyAuthor()
        {
            string[] tagsOfScenario = new string[] {
                    "create-book-with-empty-author"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create book with empty author", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
            this.ScenarioInitialize(scenarioInfo);
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the label \"Foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.And("the release date \"01/01/1957\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the support \"physical\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the imageUrl \"localhost://images/foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the editor \"Gnome Press\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the author \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the volume 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.When("validate CreateBookCommand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("validation failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create book with empty editor")]
        [Xunit.TraitAttribute("FeatureTitle", "Book")]
        [Xunit.TraitAttribute("Description", "Create book with empty editor")]
        [Xunit.TraitAttribute("Category", "create-book-with-empty-editor")]
        public virtual void CreateBookWithEmptyEditor()
        {
            string[] tagsOfScenario = new string[] {
                    "create-book-with-empty-editor"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create book with empty editor", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
            this.ScenarioInitialize(scenarioInfo);
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the label \"Foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.And("the release date \"01/01/1957\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the support \"physical\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the imageUrl \"localhost://images/foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the editor \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the author \"Isaac Asimov\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the volume 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.When("validate CreateBookCommand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("validation failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create book with negative volume")]
        [Xunit.TraitAttribute("FeatureTitle", "Book")]
        [Xunit.TraitAttribute("Description", "Create book with negative volume")]
        [Xunit.TraitAttribute("Category", "create-book-with-empty-editor")]
        public virtual void CreateBookWithNegativeVolume()
        {
            string[] tagsOfScenario = new string[] {
                    "create-book-with-empty-editor"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create book with negative volume", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
            this.ScenarioInitialize(scenarioInfo);
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the label \"Foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.And("the release date \"01/01/1957\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the support \"physical\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the imageUrl \"localhost://images/foundation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the editor \"Gnome Press\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the author \"Isaac Asimov\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the volume -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.When("validate CreateBookCommand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("validation failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BookFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BookFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
